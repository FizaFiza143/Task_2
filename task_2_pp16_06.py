# -*- coding: utf-8 -*-
"""Task-2-pp16-06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qiHJo6pBRUcI4tocDjZIsW6dttzRtO5G

##Task: Resource Allocation and Cost Management for Large-Scale Infrastructure Projects

Objective
Design a Python-based system for managing and tracking the allocation of resources (materials and
labor) for large-scale infrastructure projects. The system should track usage, monitor costs, and ensure
that resources are efficiently distributed across multiple phases of the project.
Tasks

##1.Data Import and Validation
o Import resource allocation and cost data from a CSV file.
o Ensure all required fields are filled and the data is valid.
"""

import csv

# Define the header row
headers = ['ID', 'Project_ID', 'Phase_ID', 'Resource_Type', 'Resource_Name', 'Amount_Required', 'Amount_Used', 'Cost_Estimate', 'Cost_Actual', 'Start_Date', 'End_Date']

# Open the CSV file in write mode
with open('resource_allocation.csv', 'w', newline='') as file:
    writer = csv.writer(file)

    # Write the header row
    writer.writerow(headers)

print("CSV file 'resource_allocation.csv' created with headers.")

import csv

# Define the header row (if you haven't already)
headers = ['ID', 'Project_ID', 'Phase_ID', 'Resource_Type', 'Resource_Name', 'Amount_Required', 'Amount_Used', 'Cost_Estimate', 'Cost_Actual', 'Start_Date', 'End_Date']

# Replace 'your_dataset_file.csv' with the actual path to your dataset file
dataset_file_path = '/content/drive/MyDrive/Datasetpython2/Mohsina_Faiza_Resource_Allocation_and_Cost_Management_for_Large_Scale_Infrastructure_Projects.csv'

# Open the resource allocation file in append mode ('a')
with open('resource_allocation.csv', 'a', newline='') as resource_file:
    writer = csv.writer(resource_file)

    # Open the dataset file for reading
    with open(dataset_file_path, 'r') as dataset_file:
        reader = csv.reader(dataset_file)

        # Skip the header row of the dataset file if it has one
        next(reader, None)

        # Write each row from the dataset file to the resource allocation file
        for row in reader:
            writer.writerow(row)

print("Data from dataset file added to 'resource_allocation.csv'.")

import pandas as pd

# Step 1: Import the data
# Replace 'resource_allocation.csv' with the actual filename
data = pd.read_csv('resource_allocation.csv')

# Step 2: Define required fields
required_fields = ['ID', 'Project_ID', 'Phase_ID', 'Resource_Type', 'Resource_Name', 'Amount_Required', 'Amount_Used', 'Cost_Estimate', 'Cost_Actual', 'Start_Date', 'End_Date']

# Step 3: Check for missing values in required fields
missing_values = data[required_fields].isnull().sum()

# Step 4: Print results or handle invalid data
if missing_values.any():
    print("Missing values in required fields:")
    print(missing_values)
    # Handle invalid data (e.g., drop rows, fill with default values)
else:
    print("Data is valid. No missing values in required fields.")

"""##2.Resource Utilization Tracking
o Monitor resource allocation across different project phases.
o Track labor hours, material usage, and costs.
"""

import pandas as pd

# Assuming your data is in 'resource_allocation.csv'
data = pd.read_csv('resource_allocation.csv')

# Group data by project phase and resource type
phase_resource_usage = data.groupby(['Phase_ID', 'Resource_Type'])[['Amount_Used', 'Cost_Actual']].sum()

# Display the resource usage per phase
print(phase_resource_usage)

"""##3.Cost and Budget Analysis
o Compare estimated costs with actual costs.
o Identify phases where the budget is being exceeded and recommend cost-cutting
measures.
"""

import pandas as pd

# Load the data
data = pd.read_csv('resource_allocation.csv')

# Calculate cost difference (overrun/savings)
data['Cost_Difference'] = data['Cost_Actual'] - data['Cost_Estimate']

# Identify phases with budget overruns
overrun_phases = data[data['Cost_Difference'] > 0]['Phase_ID'].unique()

# Print overrun phases and suggest cost-cutting measures
print("Phases with budget overruns:", overrun_phases)

# Group by Phase_ID and sum Cost_Difference to get total overrun per phase
phase_overruns = data.groupby('Phase_ID')['Cost_Difference'].sum()
print("\nTotal Cost Overruns/Savings per Phase:\n", phase_overruns)

print("\nConsider the following cost-cutting measures for overrun phases:")
print("- Review resource allocation and identify potential areas for reduction.")
print("- Negotiate better rates with suppliers.")
print("- Optimize labor usage and potentially reduce overtime.")
print("- Identify and mitigate potential risks early on.")
print("- Track and control change requests carefully.")

"""Interpretation:

No phases exceeded the budget. All phases show cost savings (negative Cost_Difference).
The project is currently under budget, which is a positive outcome.
This means your project is performing well financially as all phases have resulted in cost savings rather than overruns. You may want to further investigate these savings to identify contributing factors and potentially leverage them for future projects.

##4.Project Timeline Tracking
o Track the timeline of each phase and monitor delays or overruns.
o Create alerts for tasks that are likely to exceed their timeline.
"""

import pandas as pd
from datetime import datetime, timedelta

# Load the data
data = pd.read_csv('resource_allocation.csv')

# Convert date columns to datetime objects
data['Start_Date'] = pd.to_datetime(data['Start_Date'])
data['End_Date'] = pd.to_datetime(data['End_Date'])

# Calculate the planned duration of each phase
data['Planned_Duration'] = (data['End_Date'] - data['Start_Date']).dt.days

# Define a threshold for potential delays (e.g., 10 days)
delay_threshold = 10

# Identify tasks likely to exceed their timeline
potentially_delayed_tasks = data[data['Planned_Duration'] > delay_threshold]

# Print alerts for potentially delayed tasks
for index, row in potentially_delayed_tasks.iterrows():
    print(f"Alert: Task {row['ID']} (Phase {row['Phase_ID']}) has a planned duration of {row['Planned_Duration']} days and might exceed the timeline.")

print("Timeline tracking and delay monitoring completed.")

"""##5.Optimization Recommendations
o Analyze the allocation of materials and labor and recommend optimizations.
o Suggest resource reallocation for more efficient project execution.
"""

import pandas as pd

# Load the data
data = pd.read_csv('resource_allocation.csv')

# Group data by resource type and phase
resource_usage = data.groupby(['Resource_Type', 'Phase_ID'])[['Amount_Used', 'Cost_Actual']].sum()

# Identify potential areas for optimization
for resource, phase_data in resource_usage.groupby(level=0):
    print(f"\nOptimization recommendations for {resource}:")

    # Calculate mean and standard deviation of resource usage
    mean_usage = phase_data['Amount_Used'].mean()
    std_usage = phase_data['Amount_Used'].std()

    # Check for phases with unusually high or low resource usage
    for phase, usage in phase_data['Amount_Used'].items():
        if usage > mean_usage + 2 * std_usage:  # High usage
            print(f"  - Phase {phase}: Consider reducing usage (currently {usage}, average is {mean_usage:.2f}).")
            # Suggest potential reallocation to phases with lower usage
            low_usage_phases = phase_data[phase_data['Amount_Used'] < mean_usage - std_usage].index.get_level_values(1)
            if len(low_usage_phases) > 0:
                print(f"    - Potential reallocation to phases: {list(low_usage_phases)}")
        elif usage < mean_usage - 2 * std_usage:  # Low usage
            print(f"  - Phase {phase}: Consider if usage is sufficient (currently {usage}, average is {mean_usage:.2f}).")

print("\nOptimization recommendations generated.")

"""##6.Visualization
o Generate bar charts for resource usage per phase.
o Display a pie chart of the total project cost distribution.
o Create a timeline visualization to track project phases and deadlines.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv('resource_allocation.csv')

# 1. Bar chart for resource usage per phase
resource_usage = data.groupby('Phase_ID')['Amount_Used'].sum()
plt.figure(figsize=(10, 6))
resource_usage.plot(kind='bar', color='skyblue')
plt.title('Resource Usage per Phase')
plt.xlabel('Phase ID')
plt.ylabel('Total Amount Used')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()
# To see the output, run the code.


# 2. Pie chart of total project cost distribution
cost_distribution = data.groupby('Phase_ID')['Cost_Actual'].sum()
plt.figure(figsize=(8, 8))
cost_distribution.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['lightcoral', 'lightskyblue', 'lightgreen', 'gold'])
plt.title('Total Project Cost Distribution')
plt.ylabel('')  # Remove the default ylabel
plt.tight_layout()
# To see the output, run the code.


# 3. Timeline visualization for project phases and deadlines
# (Simplified example using a Gantt chart-like visualization)
plt.figure(figsize=(12, 6))
for index, row in data.iterrows():
    plt.barh(row['Phase_ID'], row['Planned_Duration'], left=row['Start_Date'], color='lightgreen')
plt.title('Project Timeline')
plt.xlabel('Date')
plt.ylabel('Phase ID')
plt.grid(axis='x')
plt.tight_layout()
# To see the output, run the code.

plt.show() # Display all the charts

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv('resource_allocation.csv')

# Group data by resource type and calculate total usage
resource_type_usage = data.groupby('Resource_Type')['Amount_Used'].sum()

# Create the pie chart
plt.figure(figsize=(8, 8))  # Adjust figure size as needed
resource_type_usage.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['lightcoral', 'lightskyblue', 'lightgreen', 'gold'])
# Customize colors as desired
plt.title('Resource Type Usage')
plt.ylabel('')  # Remove the default ylabel
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv('resource_allocation.csv')

# Group data by Resource_Name and calculate total usage
resource_name_usage = data.groupby('Resource_Name')['Amount_Used'].sum()

# Create the pie chart
plt.figure(figsize=(10, 10))  # Adjust figure size as needed
resource_name_usage.plot(kind='pie', autopct='%1.1f%%', startangle=90)
plt.title('Resource Usage by Resource Name')
plt.ylabel('')  # Remove the default ylabel
plt.tight_layout()
plt.show()


# Further analysis and visualizations to identify patterns:

# 1. Bar chart to compare usage across different phases for each resource
resource_phase_usage = data.groupby(['Resource_Name', 'Phase_ID'])['Amount_Used'].sum().unstack()
resource_phase_usage.plot(kind='bar', figsize=(12, 6))
plt.title('Resource Usage Across Phases')
plt.xlabel('Resource Name')
plt.ylabel('Total Amount Used')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Phase ID')
plt.tight_layout()
# To see the output, run the code.


# 2. Box plot to visualize distribution of usage for each resource
plt.figure(figsize=(10, 6))
data.boxplot(column='Amount_Used', by='Resource_Name', vert=False)
plt.title('Distribution of Resource Usage')
plt.xlabel('Total Amount Used')
plt.ylabel('Resource Name')
plt.tight_layout()
# To see the output, run the code.